// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: navigator/api/fileservice/v1/service.proto

package fileservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateMultipartUploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetID string `protobuf:"bytes,1,opt,name=assetID,proto3" json:"assetID,omitempty"`
	Key     string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *CreateMultipartUploadRequest) Reset() {
	*x = CreateMultipartUploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_navigator_api_fileservice_v1_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMultipartUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMultipartUploadRequest) ProtoMessage() {}

func (x *CreateMultipartUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_navigator_api_fileservice_v1_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMultipartUploadRequest.ProtoReflect.Descriptor instead.
func (*CreateMultipartUploadRequest) Descriptor() ([]byte, []int) {
	return file_navigator_api_fileservice_v1_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreateMultipartUploadRequest) GetAssetID() string {
	if x != nil {
		return x.AssetID
	}
	return ""
}

func (x *CreateMultipartUploadRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type CreateMultipartUploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadID string `protobuf:"bytes,1,opt,name=uploadID,proto3" json:"uploadID,omitempty"`
}

func (x *CreateMultipartUploadResponse) Reset() {
	*x = CreateMultipartUploadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_navigator_api_fileservice_v1_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMultipartUploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMultipartUploadResponse) ProtoMessage() {}

func (x *CreateMultipartUploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_navigator_api_fileservice_v1_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMultipartUploadResponse.ProtoReflect.Descriptor instead.
func (*CreateMultipartUploadResponse) Descriptor() ([]byte, []int) {
	return file_navigator_api_fileservice_v1_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreateMultipartUploadResponse) GetUploadID() string {
	if x != nil {
		return x.UploadID
	}
	return ""
}

type UploadPartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadID   string `protobuf:"bytes,1,opt,name=uploadID,proto3" json:"uploadID,omitempty"`
	PartNumber int32  `protobuf:"varint,2,opt,name=partNumber,proto3" json:"partNumber,omitempty"`
	Data       []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UploadPartRequest) Reset() {
	*x = UploadPartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_navigator_api_fileservice_v1_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadPartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadPartRequest) ProtoMessage() {}

func (x *UploadPartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_navigator_api_fileservice_v1_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadPartRequest.ProtoReflect.Descriptor instead.
func (*UploadPartRequest) Descriptor() ([]byte, []int) {
	return file_navigator_api_fileservice_v1_service_proto_rawDescGZIP(), []int{2}
}

func (x *UploadPartRequest) GetUploadID() string {
	if x != nil {
		return x.UploadID
	}
	return ""
}

func (x *UploadPartRequest) GetPartNumber() int32 {
	if x != nil {
		return x.PartNumber
	}
	return 0
}

func (x *UploadPartRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type UploadPartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadID   string `protobuf:"bytes,1,opt,name=uploadID,proto3" json:"uploadID,omitempty"`
	PartNumber int32  `protobuf:"varint,2,opt,name=partNumber,proto3" json:"partNumber,omitempty"`
}

func (x *UploadPartResponse) Reset() {
	*x = UploadPartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_navigator_api_fileservice_v1_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadPartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadPartResponse) ProtoMessage() {}

func (x *UploadPartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_navigator_api_fileservice_v1_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadPartResponse.ProtoReflect.Descriptor instead.
func (*UploadPartResponse) Descriptor() ([]byte, []int) {
	return file_navigator_api_fileservice_v1_service_proto_rawDescGZIP(), []int{3}
}

func (x *UploadPartResponse) GetUploadID() string {
	if x != nil {
		return x.UploadID
	}
	return ""
}

func (x *UploadPartResponse) GetPartNumber() int32 {
	if x != nil {
		return x.PartNumber
	}
	return 0
}

type CompleteMultipartUploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadId    string  `protobuf:"bytes,1,opt,name=uploadId,proto3" json:"uploadId,omitempty"`
	PartNumbers []int32 `protobuf:"varint,2,rep,packed,name=partNumbers,proto3" json:"partNumbers,omitempty"`
}

func (x *CompleteMultipartUploadRequest) Reset() {
	*x = CompleteMultipartUploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_navigator_api_fileservice_v1_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteMultipartUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteMultipartUploadRequest) ProtoMessage() {}

func (x *CompleteMultipartUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_navigator_api_fileservice_v1_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteMultipartUploadRequest.ProtoReflect.Descriptor instead.
func (*CompleteMultipartUploadRequest) Descriptor() ([]byte, []int) {
	return file_navigator_api_fileservice_v1_service_proto_rawDescGZIP(), []int{4}
}

func (x *CompleteMultipartUploadRequest) GetUploadId() string {
	if x != nil {
		return x.UploadId
	}
	return ""
}

func (x *CompleteMultipartUploadRequest) GetPartNumbers() []int32 {
	if x != nil {
		return x.PartNumbers
	}
	return nil
}

type CompleteMultipartUploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CompleteMultipartUploadResponse) Reset() {
	*x = CompleteMultipartUploadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_navigator_api_fileservice_v1_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteMultipartUploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteMultipartUploadResponse) ProtoMessage() {}

func (x *CompleteMultipartUploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_navigator_api_fileservice_v1_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteMultipartUploadResponse.ProtoReflect.Descriptor instead.
func (*CompleteMultipartUploadResponse) Descriptor() ([]byte, []int) {
	return file_navigator_api_fileservice_v1_service_proto_rawDescGZIP(), []int{5}
}

func (x *CompleteMultipartUploadResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type AbortMultipartUploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadID string `protobuf:"bytes,1,opt,name=uploadID,proto3" json:"uploadID,omitempty"`
}

func (x *AbortMultipartUploadRequest) Reset() {
	*x = AbortMultipartUploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_navigator_api_fileservice_v1_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbortMultipartUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbortMultipartUploadRequest) ProtoMessage() {}

func (x *AbortMultipartUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_navigator_api_fileservice_v1_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbortMultipartUploadRequest.ProtoReflect.Descriptor instead.
func (*AbortMultipartUploadRequest) Descriptor() ([]byte, []int) {
	return file_navigator_api_fileservice_v1_service_proto_rawDescGZIP(), []int{6}
}

func (x *AbortMultipartUploadRequest) GetUploadID() string {
	if x != nil {
		return x.UploadID
	}
	return ""
}

type AbortMultipartUploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *AbortMultipartUploadResponse) Reset() {
	*x = AbortMultipartUploadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_navigator_api_fileservice_v1_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbortMultipartUploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbortMultipartUploadResponse) ProtoMessage() {}

func (x *AbortMultipartUploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_navigator_api_fileservice_v1_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbortMultipartUploadResponse.ProtoReflect.Descriptor instead.
func (*AbortMultipartUploadResponse) Descriptor() ([]byte, []int) {
	return file_navigator_api_fileservice_v1_service_proto_rawDescGZIP(), []int{7}
}

func (x *AbortMultipartUploadResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetID          string `protobuf:"bytes,1,opt,name=assetID,proto3" json:"assetID,omitempty"`
	StartChunkNumber int32  `protobuf:"varint,2,opt,name=startChunkNumber,proto3" json:"startChunkNumber,omitempty"`
}

func (x *GetFileRequest) Reset() {
	*x = GetFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_navigator_api_fileservice_v1_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileRequest) ProtoMessage() {}

func (x *GetFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_navigator_api_fileservice_v1_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileRequest.ProtoReflect.Descriptor instead.
func (*GetFileRequest) Descriptor() ([]byte, []int) {
	return file_navigator_api_fileservice_v1_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetFileRequest) GetAssetID() string {
	if x != nil {
		return x.AssetID
	}
	return ""
}

func (x *GetFileRequest) GetStartChunkNumber() int32 {
	if x != nil {
		return x.StartChunkNumber
	}
	return 0
}

type GetFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkNumber         int32  `protobuf:"varint,1,opt,name=chunkNumber,proto3" json:"chunkNumber,omitempty"`
	Data                []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	IntegrityCheckValue string `protobuf:"bytes,3,opt,name=integrityCheckValue,proto3" json:"integrityCheckValue,omitempty"`
}

func (x *GetFileResponse) Reset() {
	*x = GetFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_navigator_api_fileservice_v1_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileResponse) ProtoMessage() {}

func (x *GetFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_navigator_api_fileservice_v1_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileResponse.ProtoReflect.Descriptor instead.
func (*GetFileResponse) Descriptor() ([]byte, []int) {
	return file_navigator_api_fileservice_v1_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetFileResponse) GetChunkNumber() int32 {
	if x != nil {
		return x.ChunkNumber
	}
	return 0
}

func (x *GetFileResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetFileResponse) GetIntegrityCheckValue() string {
	if x != nil {
		return x.IntegrityCheckValue
	}
	return ""
}

var File_navigator_api_fileservice_v1_service_proto protoreflect.FileDescriptor

var file_navigator_api_fileservice_v1_service_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x25, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x22, 0x4a, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22,
	0x3b, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61,
	0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x44, 0x22, 0x63, 0x0a, 0x11,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x50, 0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0x5e, 0x0a, 0x1e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x22, 0x3b, 0x0a, 0x1f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x39, 0x0a, 0x1b, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61,
	0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x44, 0x22, 0x38, 0x0a, 0x1c, 0x41,
	0x62, 0x6f, 0x72, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x56, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x44, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x79, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x69, 0x74, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x32, 0xff, 0x05, 0x0a, 0x0b, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xa2, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x43, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x6e, 0x61,
	0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x68,
	0x6f, 0x74, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x81, 0x01,
	0x0a, 0x0a, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x72, 0x74, 0x12, 0x38, 0x2e, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x6f,
	0x74, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0xa8, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x45, 0x2e,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x6f, 0x74, 0x2e,
	0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9f, 0x01, 0x0a,
	0x14, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x42, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x6f, 0x74,
	0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x62,
	0x6f, 0x72, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x68, 0x6f, 0x74, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a,
	0x0a, 0x07, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x35, 0x2e, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x68, 0x6f, 0x74, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x36, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x6e, 0x61, 0x76, 0x69,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x6f,
	0x74, 0x2d, 0x69, 0x6f, 0x2f, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2d, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x3b, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_navigator_api_fileservice_v1_service_proto_rawDescOnce sync.Once
	file_navigator_api_fileservice_v1_service_proto_rawDescData = file_navigator_api_fileservice_v1_service_proto_rawDesc
)

func file_navigator_api_fileservice_v1_service_proto_rawDescGZIP() []byte {
	file_navigator_api_fileservice_v1_service_proto_rawDescOnce.Do(func() {
		file_navigator_api_fileservice_v1_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_navigator_api_fileservice_v1_service_proto_rawDescData)
	})
	return file_navigator_api_fileservice_v1_service_proto_rawDescData
}

var file_navigator_api_fileservice_v1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_navigator_api_fileservice_v1_service_proto_goTypes = []interface{}{
	(*CreateMultipartUploadRequest)(nil),    // 0: flowshot.navigator.api.fileservice.v1.CreateMultipartUploadRequest
	(*CreateMultipartUploadResponse)(nil),   // 1: flowshot.navigator.api.fileservice.v1.CreateMultipartUploadResponse
	(*UploadPartRequest)(nil),               // 2: flowshot.navigator.api.fileservice.v1.UploadPartRequest
	(*UploadPartResponse)(nil),              // 3: flowshot.navigator.api.fileservice.v1.UploadPartResponse
	(*CompleteMultipartUploadRequest)(nil),  // 4: flowshot.navigator.api.fileservice.v1.CompleteMultipartUploadRequest
	(*CompleteMultipartUploadResponse)(nil), // 5: flowshot.navigator.api.fileservice.v1.CompleteMultipartUploadResponse
	(*AbortMultipartUploadRequest)(nil),     // 6: flowshot.navigator.api.fileservice.v1.AbortMultipartUploadRequest
	(*AbortMultipartUploadResponse)(nil),    // 7: flowshot.navigator.api.fileservice.v1.AbortMultipartUploadResponse
	(*GetFileRequest)(nil),                  // 8: flowshot.navigator.api.fileservice.v1.GetFileRequest
	(*GetFileResponse)(nil),                 // 9: flowshot.navigator.api.fileservice.v1.GetFileResponse
}
var file_navigator_api_fileservice_v1_service_proto_depIdxs = []int32{
	0, // 0: flowshot.navigator.api.fileservice.v1.FileService.CreateMultipartUpload:input_type -> flowshot.navigator.api.fileservice.v1.CreateMultipartUploadRequest
	2, // 1: flowshot.navigator.api.fileservice.v1.FileService.UploadPart:input_type -> flowshot.navigator.api.fileservice.v1.UploadPartRequest
	4, // 2: flowshot.navigator.api.fileservice.v1.FileService.CompleteMultipartUpload:input_type -> flowshot.navigator.api.fileservice.v1.CompleteMultipartUploadRequest
	6, // 3: flowshot.navigator.api.fileservice.v1.FileService.AbortMultipartUpload:input_type -> flowshot.navigator.api.fileservice.v1.AbortMultipartUploadRequest
	8, // 4: flowshot.navigator.api.fileservice.v1.FileService.GetFile:input_type -> flowshot.navigator.api.fileservice.v1.GetFileRequest
	1, // 5: flowshot.navigator.api.fileservice.v1.FileService.CreateMultipartUpload:output_type -> flowshot.navigator.api.fileservice.v1.CreateMultipartUploadResponse
	3, // 6: flowshot.navigator.api.fileservice.v1.FileService.UploadPart:output_type -> flowshot.navigator.api.fileservice.v1.UploadPartResponse
	5, // 7: flowshot.navigator.api.fileservice.v1.FileService.CompleteMultipartUpload:output_type -> flowshot.navigator.api.fileservice.v1.CompleteMultipartUploadResponse
	7, // 8: flowshot.navigator.api.fileservice.v1.FileService.AbortMultipartUpload:output_type -> flowshot.navigator.api.fileservice.v1.AbortMultipartUploadResponse
	9, // 9: flowshot.navigator.api.fileservice.v1.FileService.GetFile:output_type -> flowshot.navigator.api.fileservice.v1.GetFileResponse
	5, // [5:10] is the sub-list for method output_type
	0, // [0:5] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_navigator_api_fileservice_v1_service_proto_init() }
func file_navigator_api_fileservice_v1_service_proto_init() {
	if File_navigator_api_fileservice_v1_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_navigator_api_fileservice_v1_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMultipartUploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_navigator_api_fileservice_v1_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMultipartUploadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_navigator_api_fileservice_v1_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadPartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_navigator_api_fileservice_v1_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadPartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_navigator_api_fileservice_v1_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteMultipartUploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_navigator_api_fileservice_v1_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteMultipartUploadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_navigator_api_fileservice_v1_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbortMultipartUploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_navigator_api_fileservice_v1_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbortMultipartUploadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_navigator_api_fileservice_v1_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_navigator_api_fileservice_v1_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_navigator_api_fileservice_v1_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_navigator_api_fileservice_v1_service_proto_goTypes,
		DependencyIndexes: file_navigator_api_fileservice_v1_service_proto_depIdxs,
		MessageInfos:      file_navigator_api_fileservice_v1_service_proto_msgTypes,
	}.Build()
	File_navigator_api_fileservice_v1_service_proto = out.File
	file_navigator_api_fileservice_v1_service_proto_rawDesc = nil
	file_navigator_api_fileservice_v1_service_proto_goTypes = nil
	file_navigator_api_fileservice_v1_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FileServiceClient is the client API for FileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FileServiceClient interface {
	CreateMultipartUpload(ctx context.Context, in *CreateMultipartUploadRequest, opts ...grpc.CallOption) (*CreateMultipartUploadResponse, error)
	UploadPart(ctx context.Context, in *UploadPartRequest, opts ...grpc.CallOption) (*UploadPartResponse, error)
	CompleteMultipartUpload(ctx context.Context, in *CompleteMultipartUploadRequest, opts ...grpc.CallOption) (*CompleteMultipartUploadResponse, error)
	AbortMultipartUpload(ctx context.Context, in *AbortMultipartUploadRequest, opts ...grpc.CallOption) (*AbortMultipartUploadResponse, error)
	GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (FileService_GetFileClient, error)
}

type fileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServiceClient(cc grpc.ClientConnInterface) FileServiceClient {
	return &fileServiceClient{cc}
}

func (c *fileServiceClient) CreateMultipartUpload(ctx context.Context, in *CreateMultipartUploadRequest, opts ...grpc.CallOption) (*CreateMultipartUploadResponse, error) {
	out := new(CreateMultipartUploadResponse)
	err := c.cc.Invoke(ctx, "/flowshot.navigator.api.fileservice.v1.FileService/CreateMultipartUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) UploadPart(ctx context.Context, in *UploadPartRequest, opts ...grpc.CallOption) (*UploadPartResponse, error) {
	out := new(UploadPartResponse)
	err := c.cc.Invoke(ctx, "/flowshot.navigator.api.fileservice.v1.FileService/UploadPart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) CompleteMultipartUpload(ctx context.Context, in *CompleteMultipartUploadRequest, opts ...grpc.CallOption) (*CompleteMultipartUploadResponse, error) {
	out := new(CompleteMultipartUploadResponse)
	err := c.cc.Invoke(ctx, "/flowshot.navigator.api.fileservice.v1.FileService/CompleteMultipartUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) AbortMultipartUpload(ctx context.Context, in *AbortMultipartUploadRequest, opts ...grpc.CallOption) (*AbortMultipartUploadResponse, error) {
	out := new(AbortMultipartUploadResponse)
	err := c.cc.Invoke(ctx, "/flowshot.navigator.api.fileservice.v1.FileService/AbortMultipartUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (FileService_GetFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FileService_serviceDesc.Streams[0], "/flowshot.navigator.api.fileservice.v1.FileService/GetFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServiceGetFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileService_GetFileClient interface {
	Recv() (*GetFileResponse, error)
	grpc.ClientStream
}

type fileServiceGetFileClient struct {
	grpc.ClientStream
}

func (x *fileServiceGetFileClient) Recv() (*GetFileResponse, error) {
	m := new(GetFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileServiceServer is the server API for FileService service.
type FileServiceServer interface {
	CreateMultipartUpload(context.Context, *CreateMultipartUploadRequest) (*CreateMultipartUploadResponse, error)
	UploadPart(context.Context, *UploadPartRequest) (*UploadPartResponse, error)
	CompleteMultipartUpload(context.Context, *CompleteMultipartUploadRequest) (*CompleteMultipartUploadResponse, error)
	AbortMultipartUpload(context.Context, *AbortMultipartUploadRequest) (*AbortMultipartUploadResponse, error)
	GetFile(*GetFileRequest, FileService_GetFileServer) error
}

// UnimplementedFileServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFileServiceServer struct {
}

func (*UnimplementedFileServiceServer) CreateMultipartUpload(context.Context, *CreateMultipartUploadRequest) (*CreateMultipartUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMultipartUpload not implemented")
}
func (*UnimplementedFileServiceServer) UploadPart(context.Context, *UploadPartRequest) (*UploadPartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadPart not implemented")
}
func (*UnimplementedFileServiceServer) CompleteMultipartUpload(context.Context, *CompleteMultipartUploadRequest) (*CompleteMultipartUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteMultipartUpload not implemented")
}
func (*UnimplementedFileServiceServer) AbortMultipartUpload(context.Context, *AbortMultipartUploadRequest) (*AbortMultipartUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortMultipartUpload not implemented")
}
func (*UnimplementedFileServiceServer) GetFile(*GetFileRequest, FileService_GetFileServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}

func RegisterFileServiceServer(s *grpc.Server, srv FileServiceServer) {
	s.RegisterService(&_FileService_serviceDesc, srv)
}

func _FileService_CreateMultipartUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMultipartUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).CreateMultipartUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flowshot.navigator.api.fileservice.v1.FileService/CreateMultipartUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).CreateMultipartUpload(ctx, req.(*CreateMultipartUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_UploadPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadPartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).UploadPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flowshot.navigator.api.fileservice.v1.FileService/UploadPart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).UploadPart(ctx, req.(*UploadPartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_CompleteMultipartUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteMultipartUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).CompleteMultipartUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flowshot.navigator.api.fileservice.v1.FileService/CompleteMultipartUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).CompleteMultipartUpload(ctx, req.(*CompleteMultipartUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_AbortMultipartUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortMultipartUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).AbortMultipartUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flowshot.navigator.api.fileservice.v1.FileService/AbortMultipartUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).AbortMultipartUpload(ctx, req.(*AbortMultipartUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_GetFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileServiceServer).GetFile(m, &fileServiceGetFileServer{stream})
}

type FileService_GetFileServer interface {
	Send(*GetFileResponse) error
	grpc.ServerStream
}

type fileServiceGetFileServer struct {
	grpc.ServerStream
}

func (x *fileServiceGetFileServer) Send(m *GetFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _FileService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flowshot.navigator.api.fileservice.v1.FileService",
	HandlerType: (*FileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMultipartUpload",
			Handler:    _FileService_CreateMultipartUpload_Handler,
		},
		{
			MethodName: "UploadPart",
			Handler:    _FileService_UploadPart_Handler,
		},
		{
			MethodName: "CompleteMultipartUpload",
			Handler:    _FileService_CompleteMultipartUpload_Handler,
		},
		{
			MethodName: "AbortMultipartUpload",
			Handler:    _FileService_AbortMultipartUpload_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFile",
			Handler:       _FileService_GetFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "navigator/api/fileservice/v1/service.proto",
}
